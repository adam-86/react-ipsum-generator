{"version":3,"sources":["components/Output.js","components/options/Type.js","components/options/Sentances.js","App.js","serviceWorker.js","index.js"],"names":["Output","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","react_default","a","createElement","Component","Type","onChange","e","setState","target","bind","Sentances","type","App","componentDidMount","document","addEventListener","console","log","getText","axios","get","sentances","then","response","text","data","catch","err","changeType","val","changeSentances","copyToClipboard","textField","innerText","body","appendChild","select","execCommand","remove","clipboard","className","Type_Type","Sentances_Sentances","onClick","Output_Output","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ffa6c9c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Output extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n  }\n\n  render() {\n    return <article>{this.props.value}</article>;\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Type extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n  }\n\n  onChange = e => {\n    this.setState({ value: e.target.value }, () => {\n      this.props.onChange(this.state.value);\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <label>All meat or meat and filler?</label>\n        <br />\n        <select onChange={this.onChange.bind(this)}>\n          <option value=\"all-meat\">all meat</option>\n\n          <option value=\"meat-and-filler\">meat and filler</option>\n        </select>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Sentances extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n  }\n  onChange = e => {\n    this.setState({ value: e.target.value }, () => {\n      this.props.onChange(this.state.value);\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <label>How many sentances?</label>\n        <input\n          value={this.props.value}\n          type=\"number\"\n          onChange={this.onChange.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Output from \"./components/Output\";\nimport Type from \"./components/options/Type\";\nimport Sentances from \"./components/options/Sentances\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      type: \"all-meat\",\n      sentances: 5,\n      text: \"\",\n      clipboard: \"Copy\"\n    };\n  }\n\n  componentDidMount = () => {\n    document.addEventListener(\"change\", console.log(\"woot\"));\n    this.getText();\n  };\n\n  // make request to get text\n  getText = () => {\n    axios\n      .get(\n        \"https://baconipsum.com/api/?type=\" +\n          this.state.type +\n          \"&sentences=\" +\n          this.state.sentances +\n          \"&start-with-lorem=0\"\n      )\n      .then(response => {\n        this.setState({ text: response.data }, function() {\n          console.log(this.state);\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  // Toggle all meat or meat and filler\n  changeType = val => {\n    this.setState({ type: val }, this.getText);\n  };\n\n  // changes sentance count\n  changeSentances = val => {\n    this.setState({ sentances: val }, this.getText);\n  };\n\n  //\n  copyToClipboard = () => {\n    if (this.state.text !== \"\") {\n      const textField = document.createElement(\"textarea\");\n      textField.innerText = this.state.text;\n      document.body.appendChild(textField);\n      textField.select();\n      document.execCommand(\"copy\");\n      textField.remove();\n      this.setState({ clipboard: \"Copied\" });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"left-container\">\n          <h1>Bacon-Ipsum Generator</h1>\n          <Type value={this.state.type} onChange={this.changeType} />\n          <Sentances\n            value={this.state.sentances}\n            onChange={this.changeSentances}\n          />\n          <div className=\"pig\" />\n        </div>\n\n        <div className=\"right-container\">\n          <button onClick={this.copyToClipboard}>\n            {this.state.clipboard}\n            <i className=\"far fa-copy\" />\n          </button>\n          <Output value={this.state.text} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}